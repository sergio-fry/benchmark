#!/usr/bin/env ruby

require 'optparse'
require 'open3'
require 'byebug'


options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: script.rb [options]"
  opts.on("-s", "--service SERVICE", "Service to run") { |o| options[:service] = o }
  opts.on("-t", "--rails-max-threads RAILS_MAX_THREADS", "Rails max threads") { |o| options[:rails_max_threads] = o.to_i }
  opts.on("-c", "--cpus CPUS", "CPUs") { |o| options[:cpus] = o.to_i }
  opts.on("-wn", "--warmup-number NUMBER", "Number of requests to warmup") { |o| options[:warmup_number] = o.to_i }
  opts.on("-n", "--number NUMBER", "Number of requests to benchmark") { |o| options[:number] = o.to_i }
  opts.on("-r", "--results PATH", "Path to write results") { |o| options[:results_file] = o }
end.parse!

service = options[:service] || "rails-mri"
rails_max_threads = options[:rails_max_threads] || 1
cpus = options[:cpus] || 1
warmup_number = options[:warmup_number] || 1000
number = options[:number] || 1000
results_file = options[:results_file] || "results.txt"

def run_command(command)
  stdout_and_stderr_s, status = Open3.capture2e(command)

  stdout_and_stderr_s
end

def setup_environment(service, rails_max_threads, cpus)
  File.delete('.env.runtime') if File.exist?('.env.runtime')
  File.open('.env.runtime', 'w') do |file|
    file.write("RAILS_MAX_THREADS=#{rails_max_threads}")
  end
  run_command("docker compose --env-file .env.runtime -f docker-compose.yml -f docker-compose.cpu#{cpus}.yml up -d #{service}")
end

def warmup(url, concurrency:, number:)
  run_command("docker compose run --rm --remove-orphans -T bench ruby warmup.rb #{url}")
  run_command("docker compose run --rm --remove-orphans -T bench ab -k -n #{number} -c #{concurrency} #{url}")
end

def benchmark(url, name:, concurrency:, number:, results_file:)
  command = "docker compose run --rm --remove-orphans -T -e TEST_NAME='#{name}' -e NUMBER=#{number} -e CONCURRENCY=#{concurrency} bench ruby benchmark2.rb #{url}"
  result = run_command(command)
  puts result
  File.open(results_file, 'a') { |file| file.write(result.strip + "\n") }
end

def benchmark_twice(url, concurrency:, name:, number:, results_file:)
  benchmark(url, concurrency:, name:, number:, results_file:)
  benchmark(url, concurrency:, name:, number:, results_file:)
end

setup_environment(service, rails_max_threads, cpus)

name = "cpu=#{cpus}, rails_thread=#{rails_max_threads}, service=#{service}"

warmup("http://#{service}:8080/json", concurrency: rails_max_threads, number: warmup_number)
benchmark_twice("http://#{service}:8080/json", concurrency: 1, name:, number:, results_file:)
benchmark_twice("http://#{service}:8080/json", concurrency: 2, name:, number:, results_file:)
benchmark_twice("http://#{service}:8080/json", concurrency: 3, name:, number:, results_file:)
benchmark_twice("http://#{service}:8080/json", concurrency: 4, name:, number:, results_file:)
benchmark_twice("http://#{service}:8080/json", concurrency: 5, name:, number:, results_file:)
benchmark_twice("http://#{service}:8080/json", concurrency: 6, name:, number:, results_file:)

warmup("http://#{service}:8080/db", concurrency: rails_max_threads, number: warmup_number)
benchmark_twice("http://#{service}:8080/db", concurrency: 1, name:, number:, results_file:)
benchmark_twice("http://#{service}:8080/db", concurrency: 2, name:, number:, results_file:)
benchmark_twice("http://#{service}:8080/db", concurrency: 3, name:, number:, results_file:)
benchmark_twice("http://#{service}:8080/db", concurrency: 4, name:, number:, results_file:)
benchmark_twice("http://#{service}:8080/db", concurrency: 5, name:, number:, results_file:)
benchmark_twice("http://#{service}:8080/db", concurrency: 6, name:, number:, results_file:)
